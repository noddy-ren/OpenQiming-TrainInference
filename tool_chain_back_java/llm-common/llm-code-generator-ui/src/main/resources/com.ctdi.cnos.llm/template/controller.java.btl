package ${package.Controller};

import com.ctdi.cnos.llm.base.constant.ApplicationConstant;
<% if(!restControllerStyle){ %>
import org.springframework.stereotype.Controller;
<% } %>
<% if(isNotEmpty(superControllerClassPackage)){ %>
import ${superControllerClassPackage};
<% } %>
<% if(isNotEmpty(controllerMethods.list)){  %>
import com.ctdi.cnos.llm.base.object.PageResult;
import com.ctdi.cnos.llm.base.object.QueryParam;
<% } %>
<% if(isNotEmpty(controllerMethods.create) || isNotEmpty(controllerMethods.update)){  %>
import com.ctdi.cnos.llm.base.object.Groups;
<% } %>
<% if(isNotEmpty(controllerMethods.hasMethod)){  %>
import com.ctdi.cnos.llm.response.OperateResult;
import com.ctdi.cnos.llm.util.ModelUtil;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import lombok.RequiredArgsConstructor;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
<% } %>

import javax.validation.constraints.NotNull;
import java.util.List;

<%
   var serviceInstanceName = @cn.hutool.core.util.StrUtil.lowerFirst(table.serviceName);
%>
/**
 * ${table.comment!} 控制器类。
 *
 * @author ${author}
 * @since ${date}
 */
@Api(tags = "${table.comment!}接口", value = "${table.controllerName}")
@RequiredArgsConstructor
<% if(restControllerStyle){ %>
@RestController
<% }else{ %>
@Controller
<% } %>
@RequestMapping("<% if(isNotEmpty(package.ModuleName)){ %>/${package.ModuleName}<% } %>/<% if(isNotEmpty(controllerMappingHyphenStyle)){ %>${entityInstanceName}<% }else{ %>${table.entityPath}<% } %>")
<% if(kotlin){ %>
class ${table.controllerName}<% if(isNotEmpty(superControllerClass)){ %> : ${superControllerClass}()<% } %>
<% }else{ %>
    <% if(isNotEmpty(superControllerClass)){ %>
public class ${table.controllerName} extends ${superControllerClass}<${entity}, ${voConfig.className}> {
    <% }else{ %>
public class ${table.controllerName} {
    <% } %>
	
    <% if(isNotEmpty(controllerMethods.hasMethod)){  %>
    private final ${table.serviceName} service;
    <% } %>
	
    <% if(isNotEmpty(controllerMethods.list)){  %>
    /**
     * 分页查询符合条件的${table.comment!}列表。
     *
     * @param queryParam 查询对象。
     * @return 分页列表数据。
     */
	@ApiOperation(value = "分页查询符合条件的${table.comment!}数据", notes = "分页查询符合条件的${table.comment!}数据")
    @PostMapping(value = "/queryPage")
    public OperateResult<PageResult<${voConfig.className}>> queryPage(@Validated(Groups.PAGE.class) @RequestBody QueryParam queryParam) {
        return OperateResult.success(service.queryPage(queryParam));
    }
	
    /**
     * 查询符合条件的${table.comment!}列表。
     *
     * @param queryParam 查询对象。
     * @return 列表数据。
     */
	@ApiOperation(value = "列表查询符合条件的${table.comment!}数据", notes = "列表查询符合条件的${table.comment!}数据")
    @PostMapping(value = "/queryList")
    public OperateResult<List<${voConfig.className}>> queryList(@RequestBody QueryParam queryParam) {
        return OperateResult.success(service.queryList(queryParam));
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.getById)){ %>
    /**
     * 查询指定${table.comment!}数据。
     *
     * @param id 指定${table.comment!}主键Id。
     * @return 单条数据。
     */
	@ApiOperation(value = "查询指定ID的${table.comment!}数据", notes = "通过${table.comment!}ID获取具体的${table.comment!}数据")
	@GetMapping(value = "/queryById")
    public OperateResult<${voConfig.className}> queryById(@ApiParam(value = "${table.comment!}ID", required = true, example = "1")
                          @NotNull(message = "${table.comment!}ID不能为空") @RequestParam("id") Long id) {
        return OperateResult.success(service.queryById(id, true));
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.create)){ %>
    /**
     * 添加${table.comment!}操作。
     *
     * @param ${entityInstanceName}DTO 添加${table.comment!}对象。
     * @return 应答结果对象。
     */
	@ApiOperation(value = "创建${table.comment!}", notes = "根据请求体中的${table.comment!}信息创建")
	@ApiOperationSupport(ignoreParameters = {"id"})
    @PostMapping(value = "/add")
    public OperateResult<String> add(@Validated(Groups.ADD.class) @RequestBody ${entity}DTO ${entityInstanceName}DTO) {
		${entity} ${entityInstanceName} = ModelUtil.copyTo(${entityInstanceName}DTO, ${entity}.class);
        return service.save(${entityInstanceName}) ? OperateResult.successMessage(ApplicationConstant.SAVE_MESSAGE) : OperateResult.error(ErrorCodeEnum.DATA_SAVE_FAILED);
    }
    <% } %>
	
    <% if(isNotEmpty(controllerMethods.update)){ %>
    /**
     * 更新${table.comment!}操作。
     *
     * @param ${entityInstanceName}DTO 更新${table.comment!}对象。
     * @return 应答结果对象。
     */
	@ApiOperation(value = "更新${table.comment!}", notes = "根据ID更新指定的${table.comment!}信息")
    @PostMapping(value = "/updateById")
    public OperateResult<String> updateById(@Validated(Groups.UPDATE.class) @RequestBody ${entity}DTO ${entityInstanceName}DTO) {
		${entity} ${entityInstanceName} = ModelUtil.copyTo(${entityInstanceName}DTO, ${entity}.class);
		return service.updateById(${entityInstanceName}) ? OperateResult.successMessage(ApplicationConstant.UPDATE_MESSAGE) : OperateResult.error(ErrorCodeEnum.DATA_SAVE_FAILED);
    }
    <% } %>

    <% if(isNotEmpty(controllerMethods.delete)){ %>
    /**
     * 删除指定的${table.comment!}。
     *
     * @param id 指定${table.comment!}主键Id。
     * @return 应答结果对象。
     */
	@ApiOperation(value = "删除${table.comment!}", notes = "根据ID删除指定的${table.comment!}")
    @GetMapping(value = "/deleteById")
    public OperateResult<String> deleteById(@ApiParam(value = "${table.comment!}ID", required = true, example = "1")
                          @NotNull(message = "${table.comment!}ID不能为空") @RequestParam("id") Long id) {
		return service.deleteById(id) ? OperateResult.successMessage(ApplicationConstant.DELETE_MESSAGE) : OperateResult.error(ErrorCodeEnum.DATA_NOT_EXIST);
    }
    <% } %>

}
<% } %>